const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const authRoutes = require('./routes/auth');
const investRoutes = require('./routes/invest');

dotenv.config();
const app = express();
app.use(express.json());

mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => console.log('MongoDB connected'))
.catch(err => console.log(err));

app.use('/api/auth', authRoutes);
app.use('/api/invest', investRoutes);

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  username: String,
  password: String,
  referralCode: String,
  referredBy: String,
  walletAddress: String,
  investments: [
    {
      planAmount: Number,
      dailyRate: Number,
      startDate: Date
    }
  ]
});

module.exports = mongoose.model('User', userSchema);
const express = require('express');
const router = express.Router();
const User = require('../models/User');
const bcrypt = require('bcryptjs');

router.post('/register', async (req, res) => {
  const { username, password, referralCode } = req.body;

  const hashedPassword = await bcrypt.hash(password, 10);
  const newUser = new User({
    username,
    password: hashedPassword,
    referralCode: generateReferralCode(),
    referredBy: referralCode || null
  });

  await newUser.save();
  res.json({ message: 'User registered successfully' });
});

router.post('/login', async (req, res) => {
  const { username, password } = req.body;

  const user = await User.findOne({ username });
  if (!user || !(await bcrypt.compare(password, user.password))) {
    return res.status(400).json({ error: 'Invalid credentials' });
  }

  res.json({ message: 'Login successful', userId: user._id });
});

function generateReferralCode() {
  return Math.random().toString(36).substring(2, 8);
}

module.exports = router;
const express = require('express');
const router = express.Router();
const User = require('../models/User');

router.post('/create', async (req, res) => {
  const { userId, planAmount } = req.body;

  const user = await User.findById(userId);
  if (!user) return res.status(404).json({ error: 'User not found' });

  const investment = {
    planAmount,
    dailyRate: 10,
    startDate: new Date()
  };

  user.investments.push(investment);
  await user.save();

  res.json({ message: 'Investment recorded', investment });
});

router.get('/return/:userId', async (req, res) => {
  const { userId } = req.params;

  const user = await User.findById(userId);
  if (!user) return res.status(404).json({ error: 'User not found' });

  let totalReturn = 0;
  const now = new Date();

  user.investments.forEach(inv => {
    const days = Math.floor((now - new Date(inv.startDate)) / (1000 * 60 * 60 * 24));
    const earned = inv.planAmount * (1 + (inv.dailyRate / 100) * days);
    totalReturn += earned;
  });

  res.json({ totalReturn });
});

module.exports = router;
MONGO_URI=your_mongodb_connection_string_here
{
  "name": "usdt-invest-backend",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "dotenv": "^16.0.3",
    "express": "^4.18.2",
    "mongoose": "^7.2.2"
  }
}
git init
git add .
git commit -m "Initial backend setup"
git branch -M main
git remote add origin https://github.com/yourusername/usdt-invest-backend.git
git push -u origin main
